"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cache = void 0;
/**
 * Simple cache implementation for INTUE
 */
class Cache {
    /**
     * Create a new cache
     * @param options - Cache options
     */
    constructor(options = {}) {
        this.storage = new Map();
        this.timers = new Map();
        this.ttl = options.ttl || 5 * 60 * 1000; // Default 5 minutes
    }
    /**
     * Set a value in the cache
     * @param key - Cache key
     * @param value - Value to cache
     */
    set(key, value) {
        // Clear any existing expiration timer
        if (this.timers.has(key)) {
            clearTimeout(this.timers.get(key));
        }
        // Store the value
        this.storage.set(key, value);
        // Set expiration
        const timer = setTimeout(() => {
            this.storage.delete(key);
            this.timers.delete(key);
        }, this.ttl);
        this.timers.set(key, timer);
    }
    /**
     * Get a value from the cache
     * @param key - Cache key
     * @returns Cached value or undefined
     */
    get(key) {
        return this.storage.get(key);
    }
    /**
     * Clear the cache
     */
    clear() {
        // Clear all timers
        this.timers.forEach(timer => clearTimeout(timer));
        // Clear storage
        this.storage.clear();
        this.timers.clear();
    }
}
exports.Cache = Cache;
